
<input type="text " name="fieldname" value="Hello"> 

<p> </p>
______________________________________________________5_______________________________________________________
<p> </p>

<?php 
//  echo phpinfo(); 
   if (isset($a))              // проверка, существует лт переменная: истина, если переменная объявлена даже без присваивания значения.
   {                          // для проверки обратных условий следует воспользоваться символом восклицания (!),  напр: " ! isset($имя_переменной) "
	   echo "YES!";
   } 
   else
   {
	echo "NO!";   
   }
   echo "<p>";

   echo empty ($b), "<p>";       // проверка, существует ли переменная: истина, если значение переменной, равно нулю или пустой строке, либо переменная не объявлена. 
 
   $c = 77.8;                  // результатом выполнения этой функции является TRUE, если переменная имеет тип integer
  echo is_int($c), "<p>"; 
  # is_arra y ($var2) проверяет, является ли переменная $var2 массивом.
  # is_f loa t ($number) проверяет, является ли переменная $number числом с плавающей точкой.
  # is_null ($varl) проверяет, равно ли значение переменной $varl нулю 
  # is_numeric($string ) проверяет, является ли переменная $strin g числовой строкой.
  # is_strin g ($string) проверяет, является ли переменная $strin g строкой. 
    // обратите внимание, что использован полный синтаксис записи php-скрипта. <?php вместо <?
 ?>
     
   <?
                                                         # Использование в шаблоне специальных символов:
   /*^ - начало строки
   $ - конец строки
   . - любой одиночный символов
   ? - предшествующий символ является не обязательным
   ( ) - Группирует буквенные символы в последовательность, которую в точности должна содержать строка 
   [ ] - Включает набор необязательных символов 
    - включает диапазон всех символов, заключенных между двумя (ряд возможных символов)
	+ один или несколько наборов предшествующих символов
	* Один, ни одного или несколько вхождений предшествующего символа 
   {n} повторение n раз
   {n1, n2} - определяет диапазон повторений символа (символов)
   \ определяет буквенный символ
   (||) - набор альтернативных строк  прим.(Сэм | Салли)*/
   echo "_________________________________47___________________________________ <p>";
   $string_mail = "google@mail.com";
   echo ereg("^.+@.+\.com$", $string_mail), "<p>";                                       // сравнение строк с шаблоном, выводит 1 (true) или 0 (ничего)
   
                                      // Объединение условий - сначала выполняется and, затем хог и or
      $resCity = "Reno";
	  $name = "Salli";
	  $resStat = "Norv";
      echo $resCity == "Reno" or $resStat == "NV" and $name == "Salli", "<p>";       // условие1 and|or|хог условие2 and|or|хог условиеЗ and|or|хог .. . 
                                                                     
																	 /* IF */
													    // ВЫСТАВЛЕНИЕ ОЦЕНКИ СТУДЕНТУ
if ($score > 92)
   {$grade = "А";
    $message = "Отлично";
	}
elseif ($score <= 92 and $score > 83)              //  elseif может применяться сколько угодно раз
   {$grade = "B";
    $message = "Хорошо";
   }
elseif ($score <= 83 and $score > 74)           // если фрагмент кода, выполняемый после проверки условия, состоит из одного выражения, фигурные скобки можно опустить
   {$grade = "C";
    $message = "Удовлетворительно";
   }
elseif ($score <= 74 and $score > 62)
{	$grade = "D";
    $message = "Неудовлетворительно";
}
else                                       // выполняются при не выполнении всех отсальных инстукций, применяется только один раз 
{	$grade = "F";
    $message = " Tak sebe ocenka!";
}
echo $message. "<p>";
echo " Bаша оценка $grade <p>"; 
					                                             # ОТРИЦАНИЕ В ОПЕРАТОРЕ IF 							 
      /* 
   if (ereg("^С[а-я]*$", $string))                           // из-за наличия восклицательного знака (!) перед условным выражением =>
{	                                                        // => результат будет содержать все строки, кроме тех, которые начинаются с символа С =>
         $list[] = $string. "\n";                          // => т.е. условие истинно, если строка $string не начинается с символа С
 }   
     */

                                                              # ВЛОЖЕННЫЕ ОПЕРАТОРЫ IF
                                                         // ОТБОР ЖИТЕЛЕЙ ПО ГОРОДУ И ОПРЕДЕЛЕНИЕ СПОСОБА ОТПРАВКИ ПОЧТЫ
  if ($custStat == "ID")
 {
       if ($EmailAdd = "")
     { $contactMethod = "по обычной почте";
     }
       else
     { $contactMethod = "по электронной почте";
     }
 }
  else
 {$contactMethod = "нет необходимости";
 } 
 echo "<p>";
                                                                    /*  SWITCH  */
														# ПОДСЧЕТ НАЛОГА В РАЗНЫХ ШТАТАХ АМЕРИКИ			
  switch ($custState)           // сравниваем значение переменной со значениями в каждом из case, при полном соответсвии выполняется инструкция этого case =>
{                              // => если значение не найдено, то работает инструкция default  
    case "OR":
        $salestaxrate = 0;
        break;
    case "CA":
        $salestaxrate = 1.0;
        break;
    default:
        $salestaxrate = .5;
        break;
}
$orderTotalCost = 88;
echo $salestax = $orderTotalCost*$salestaxrate, "<p>";
                                                                     /* ЦИКЛ FOR */
															//  for (начальное_значение; конечное_условие; инкремент)
                                                           //      {
                                                          //        фрагмент кода;
                                                         //        } 
               # ВЫВОДИМ ТРИ РАЗА "ЗДРАВСТВУЙ МИР!"
 for ($i=1; $i<=3; $i++)
   {
    echo "$i. 3дравствуй, мир! <br>";
   } 
 echo "<p>";                                 
             								  // ВЛОЖЕННЫЕ ЦИКЛЫ FOR
                           # ТАБЛИЦА УМНОЖЕНИЯ
	for ($i=1; $i<=9; $i++)
	{
		for ($j=1; $j<=9; $j++)
		{
			$result = $i*$j;
			echo " $i*$j = $result | "; 
		}
	echo "<p>"; 
	}

                                                     // УСЛОЖНЕННЫЕ ЦИКЛЫ FOR
$t = 0;
for ($i=0, $j=1; $t<=4; $i++, $j++)
  {
    $t = $i + $j;
    echo "$t <br>";
  } 
?>
 ____________________________________________________________151_________________________________________________________________ 

 <?
                                                          /* ЦИКЛ WHILE */ 
													//	  while ( условие )
                                                   //    {
                                                  //      фрагмент кода;
												 // 	}
     echo "<p>";
                                          	 # ПОИСК В МАССИВЕ ЭЛЕМЕНТА "ЯБЛОКО"
$fruit = array("апельсин", "мандарин", "виноград", "груша", "яблоко");
$vukl = "нет";
$k = 0;
while ($vukl != "да")
{
	if ($fruit[$k] == "яблоко")
	{
		$vukl = "да";
		echo "$vukl - нашли $fruit[$k]!";
	}
	else 
	{
	echo "$fruit[$k] - это не яблоко, <br>";	
	}
	$k++;
}	
echo "<p>";
                               /* ЦИКЛ DO..WHILE  - то же самое , что WHILE, только при ложном условии, фрагмент кода выполнится хотя бы один раз */
                                                   //  do
                                                  //   {
                                                 //     фрагмент кода;
                                                //     }
                                               //       while ( условие ); 
													  
$fruit = array("апельсин", "мандарин", "виноград", "груша", "яблоко");
$vukl = "ДА!";
$k = 0;
do 
{
 	if ($fruit[$k] == "яблоко")
	{
		$vukl = "ДА!";
		echo "$vukl - нашли $fruit[$k]!";
	}
	else 
	{
	    echo "$fruit[$k] - это не яблоко, <br>";	
	}
	    $k++;
 } while ($vukl != "ДА!") 	
	 
   ?>
   <p>
   <?                       #ПРЕРЫВАНИЕ ЦИКЛОВ "break" и "сontinue"
$counter = 0;
while ($counter <5)
{
	$counter++;
    if ($counter == 3)
  {
    echo "break <p>";
    break;                                                // break (заканчивает полностью цикл и выходит)
  }
echo "Последняя строка цикла: счетчик = $counter<br>";
}
echo "Первая строка после цикла<p><p>"; 
?>
_________________________________________________________218___________________________________________________________ <p>

<?
$counter = 0;
while ($counter <5)
{
	$counter++;
    if ($counter == 3)
  {
    echo "continue <p>";
    continue;                                                // continue (заканчивает полностью цикл и выходит)
  }
echo "Последняя строка цикла: счетчик = $counter<br>";
}
echo "Первая строка после цикла<p><p>";
?>				

<?                                                   # ВКЛЮЧЕНИЕ ФАЙЛОВ с кодом, в сценарий INCLUDE
                 // ВЫВОДИМ РАЗНЫЕ ОПОВЕЩЕНИЯ НА КАЖДЫЙ ДЕНЬ НЕДЕЛИ
# include("$filename");                   // можно включать как файлы, так и переменные; =>
                                         // = > если нет файла к которому обращается инструкция, то будет выведена ошибка, но сценарии продолжут выполняться
date_default_timezone_set('UTC');                        // задаем время по умолчанию
$today = date("D");                                     // задаем переменной краткое имя сегоднешнего дня недели
if ($today == "Thu")
{
include("$today".".inc");             // включается файл под названием Thu.inc тогда, когда имя $today будет равно Thu
echo "<p>";                          
}
else 
{
	echo $today, "<p>";
}
# include_once("имя_файла")             // Эта функция позволяет избежать повторного переопределения одинаковых переменных, содержащихся во включаемых файлах                                                     
// функция require() и require_once()           // если нет файла к которому обращается инструкция, то будет выведена ошибка и сценарий остановится

?>

 <?                                                 # ФУНКЦИИ (Создание повторно используемого кода)
 /*	
 function имя_функции(значение1, значение2, ...)
{
набор команд;
return;
} 
___________________________________________________

 // for example: 
 
 function add_footer()			
 { 
echo '<img src="greenrule.jpg" width="100%" height="7" />
<address>Moя компания
<br />ул. Прекрасная 1234
<br />Сан Диего, СА 92126
</address></font>
<р>или обращайтесь в
<а href = "sа1еs@соmраnу.соm">отдел продаж /а>
<img src="greenrule.jpg" width="100%" height="7" />' ;
return;
 }
*/  
                                                   # ЛОКАЛЬНЫЕ И ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ В ФУНКЦИИ
#____________________________________________LOCAL
function format_name($first_name, $last_name)
{
$name = $last_name. " , " .$first_name;                   // локальные пременные, они доступны только в теле функции
echo $name, "<p>";
} 
format_name ("LOCAL VAR" , "LOCAL ");                  // вызов функции и передача значений в функцию

# ___________________________________________GLOBAL
# 1

function glob_format($f_n, $l_n)
{
	global $n;                                                   // для доступа к переменной из в не тела функции, объявляем ее глобальной
	$n = $l_n. " , " .$f_n;
}

glob_format("GLOBAL VAR_IN","GLOBAL");						  // вызов функции 						   
echo $n, "<p>";											     // вызов переменной (которая внутри функции)	   

# 2
  
$first_name = "GLOBAL VAR_WITHOUT";                       // создаем переменные из вне функции 
$last_name = "GLOBAL 2";

function form_name($first_name, $last_name)
{
global $first_name, $last_name;                       // для доступа к переменным из в не тела функции, объявляем их внутри тела функции, глобальными
$name = $last_name. " , " .$first_name;
echo "$name", "<p>";
}
form_name($first_name, $last_name)  
                                                      #КОРРЕКТНАЯ ПЕРЕДАЧА ЗНАЧЕНИЙ В ФУНКЦИЮ
  # compute_salestax(2000, "CA")           // при передаче значений в качестве аргументов можно использовать переменные любого типа, включая массивы или объекты 
  # compute_salestax(2*1000, " ") 
  # compute_salestax(2000, "C"."A")      // все это корректно
  ?>
  
 <?
    function add_numbers($numbers)                 // в качестве аргументов функции используем массив 
{ 
   if (!is_array($numbers))                      // проверяем массив ли это, иначе STOP 
     {
      echo "Переданная переменная не является массивом"; 
      exit();
     }
 for($i=0; $i < sizeof($numbers); $i++)             // sizeof - считает кол-во элементов массива 
     {
     $sum = $sum + $numbers[$i];                  // считаем сумму элементов массива
     }
    echo $sum;  
   return;       
}
// _____________________________________ 
 $numbers = array(100,200);                    // задаем входные данные массива
 add_numbers($numbers);                       // вызываем функцию со значением $numbers
 echo "<p>";
// _____________________________________ 
 $numb2 = array(100,200,300,400,500);
 add_numbers($numb2);                      // вызываем функцию со значением $numb2
 echo "<p>";       
  ?>
<?/* Если при вызове функции порядок переданных аргументов не соответствует тому, который использовался при определении, — возникает ошибка 
FOR EXMAPLE:_________________________________________
function compute_salestax($orderCost, $custState)
      {
      вычисление налога
      )  
  
compute_salestax($custState, $orderCost);                     // в результате будет 0 , т.к. в неправильном порядке введены входные данные  
*/
_____________________________ 
/* format_name("Джесс");                                    // при вводе одного значени функциии, второе (если иное не задано) будет равен NULL
В результате получим:
Джесс
*/  
   /*                                                                 // если функции передать слишком много аргументов, лишние из них будут проигнорированы
    function add($numm1=1, $numm2=2)                               	 // переменным, значения которых передаются в функцию, можно присвоить значения по умолчанию, =>                                          
    {                                                            	// => однако если при вызове функции указано значение параметра, то именно оно используется вместо значения по умолчанию
	$total = $numm1 + $numm2;
    return $total;                                                 
	}
	            		
add(2, 2);                           // будет = 2+2 = 4
add(2);                             // будет = 2+1 = 3
add();                             // будет = 1+1 = 2
*/
?>
______________________________________________________368_______________________________________________________
<?
echo "<p>";
$original = 100;
$alyas = &$original;                                                  // &-ссылка, $alyas ссылается на $original 
                                                                    
function add(&$n1)                                                  // при вызове функции, передаю переменные в функцию по ссылке, и функция может изменять свои аргументы. Значение глобальной переменной уже изменится
{
	$n1 = $n1 + 1;
	return $n1;                                                  // при добавлении $n1 возвращается измененное значение переменной за пределы функции
}
$orig_num = 5;
$orig_num = add($orig_num);
echo $orig_num, "<p>";

                                                 // RETURN - ВОЗВРАЩАЮЩЕЕ ЗНАЧЕНИЕ
 function add_2_numbers($num1, $num2) 
 {
		 return $num1 + $num2;
 }
 echo add_2_numbers(10, 20);
 
echo "<p>_______________________________________________________________________ <p>";
 
 function find_value($array, $value)
 {
   for($i=0;$i<sizeof($array);$i++)
    {
    if($array[$i] == $value)
        {
         echo "$i. $array[$i]<br>" ;
         return;
        }
    }
 }
$names = array("Djo", "Sem", "Huan");
$s = "Huan";
echo find_value($names, "Huan"); 

echo "<p>_______________________________________________________________________ <p>";

function find_val($array, $value)
{
   for($i=0;$i<sizeof($array);$i++)                            //sizeof считает количество элементов от 1-ки
   {
      if($array[$i] == $value)
      {
      echo "номер индекса элемента массива = $i, <br> это значит, что результат операции = TRUE, т.е. ";
	  return TRUE;
      }
   }
return FALSE;
}
$names = array("Djo", "Sem", "Huan");
echo find_val($names, "Huan"), "<p>";

 echo getlastmod(), "<p>";
 
	                                                                    # ОБРАБОТКА ОШИБОК
@mysql_connect("host", "user", "password")                               // @ - не показывает ошибку
or die("база данных не доступна. попробуйте подключиться позже");       // die - позволяет ПОЛНОСТЬЮ прервать выполнение сценария и вывести соответствующее сообщение, если фунция не сработает (но предварительно надо отключить вывод дефолтных ошибок PHP).

if(!mysql_connect("host" , "user" , "password"))
   {
   echo "База данных недоступна. Попробуйте подключиться позже\п";
   exit () ;                                                              // предотвращает лишь некорректную работу функции и ПОЛНОСТЬЮ не прерывает сценарий
   } 
	?>	
	